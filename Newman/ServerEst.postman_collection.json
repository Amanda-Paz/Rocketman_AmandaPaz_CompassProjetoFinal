{
	"info": {
		"_postman_id": "dd2fee01-a479-4ee3-9644-e30cf918e1ad",
		"name": "ServerEst",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "21828496"
	},
	"item": [
		{
			"name": "/login",
			"item": [
				{
					"name": "Realizar Login (positivo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TESTES // \r",
									"\r",
									" pm.test(\"O Código tem que ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									" pm.test(\"POST com sucesso\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code deu a resposta em String\", function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"\r",
									"});\r",
									"\r",
									"const atributos = [\"message\",\"authorization\"]\r",
									"\r",
									"\r",
									"atributos.forEach((atributo)=> {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
									"        pm.expect(pm.response.json()[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"// - // \r",
									"//  Validacao de Header // \r",
									"\r",
									"pm.test(\"Content-Type está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									" // - // \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RlclFBQGhvdG1haWwuY29tIiwicGFzc3dvcmQiOiJ0ZXN0ZVFBIiwiaWF0IjoxNjYwNzg3ODM4LCJleHAiOjE2NjA3ODg0Mzh9.kHwl_eFdHiVH4XmoBWMwtyQxt_e41jIDsZ5PBLXYOpE"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"email\": \"testerQA@hotmail.com\",\r\n            \"password\": \"testeQA\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login"
					},
					"response": []
				}
			]
		},
		{
			"name": "/usuários",
			"item": [
				{
					"name": "Listar usuários",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const atributos = [\"quantidade\", \"usuarios\"]\r",
									"const response = pm.response.json()\r",
									"\r",
									"atributos.forEach((atributo)=> {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
									"        pm.expect (response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"pm.test(\"Tempo de resposta menor que  200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"GET com sucesso\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"// - // \r",
									"//  Validacao de Header // \r",
									"\r",
									"pm.test(\"Content-Type está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									" // - // \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// LOGIN // \r",
									"const url = pm.environment.get('baseURL')\r",
									"const postRequest = {\r",
									"    url: `${url}/login`, \r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type':'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode:'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"email\": \"testerQA@hotmail.com\",\r",
									"       \"password\": \"testeQA\"\r",
									"})\r",
									"\r",
									"    }\r",
									"} \r",
									"pm.sendRequest(postRequest, (err, response) =>  {\r",
									"    const res = response.json()\r",
									"\r",
									"    console.log (err ? err : res);\r",
									"    try {\r",
									"         //se der certo \r",
									"\r",
									"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
									"        console.log (res.authorization.slice(7))\r",
									"\r",
									"    } catch {\r",
									"\r",
									"        // se der erro \r",
									"        console.warn ('FAIL')\r",
									"    }\r",
									"});\r",
									"// - // "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{baseURL}}/usuarios"
					},
					"response": []
				},
				{
					"name": "Listar usuários por id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"O Código tem que ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"GET com sucesso\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code deu a resposta em String\", function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"});\r",
									"\r",
									"const atributos = [\"nome\", \"email\",\"password\",\"administrador\",\"_id\"]\r",
									"const response = pm.response.json()\r",
									"\r",
									"atributos.forEach((atributo)=> {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
									"        pm.expect (response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"// - // \r",
									"//  Validacao de Header // \r",
									"\r",
									"pm.test(\"Content-Type está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									" // - // \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// LOGIN // \r",
									"const url = pm.environment.get('baseURL')\r",
									"const postRequest = {\r",
									"    url: `${url}/login`, \r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type':'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode:'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"email\": \"testerQA@hotmail.com\",\r",
									"       \"password\": \"testeQA\"\r",
									"})\r",
									"\r",
									"    }\r",
									"} \r",
									"pm.sendRequest(postRequest, (err, response) =>  {\r",
									"    const res = response.json()\r",
									"\r",
									"    console.log (err ? err : res);\r",
									"    try {\r",
									"         //se der certo \r",
									"\r",
									"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
									"        console.log (res.authorization.slice(7))\r",
									"\r",
									"    } catch {\r",
									"\r",
									"        // se der erro \r",
									"        console.warn ('FAIL')\r",
									"    }\r",
									"});\r",
									"// - // "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{baseURL}}/usuarios/0uxuPY0cbmQhpEz1"
					},
					"response": []
				},
				{
					"name": "Editar usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"O Código tem que ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"PUT com sucesso\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code deu a resposta em String\", function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"});\r",
									"\r",
									"const atributos = [\"message\"]\r",
									"const response = pm.response.json()\r",
									"\r",
									"atributos.forEach((atributo)=> {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
									"        pm.expect (response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"// - // \r",
									"//  Validacao de Header // \r",
									"\r",
									"pm.test(\"Content-Type está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									" // - // \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// LOGIN // \r",
									"const url = pm.environment.get('baseURL')\r",
									"const postRequest = {\r",
									"    url: `${url}/login`, \r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type':'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode:'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"email\": \"testerQA@hotmail.com\",\r",
									"       \"password\": \"testeQA\"\r",
									"})\r",
									"\r",
									"    }\r",
									"} \r",
									"pm.sendRequest(postRequest, (err, response) =>  {\r",
									"    const res = response.json()\r",
									"\r",
									"    console.log (err ? err : res);\r",
									"    try {\r",
									"         //se der certo \r",
									"\r",
									"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
									"        console.log (res.authorization.slice(7))\r",
									"\r",
									"    } catch {\r",
									"\r",
									"        // se der erro \r",
									"        console.warn ('FAIL')\r",
									"    }\r",
									"});\r",
									"// - // "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n           \"nome\": \"UsuarioComum\",\r\n\r\n            \"email\": \"testeComum@hotmail.com\",\r\n\r\n            \"password\": \"teste1\",\r\n            \r\n            \"administrador\": \"false\" \r\n           \r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/usuarios/X87MdgPpiDvezVTo"
					},
					"response": []
				},
				{
					"name": "Cadastrar usuário",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// LOGIN // \r",
									"const url = pm.environment.get('baseURL')\r",
									"const postRequest = {\r",
									"    url: `${url}/login`, \r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type':'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode:'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"email\": \"testerQA@hotmail.com\",\r",
									"       \"password\": \"testeQA\"\r",
									"})\r",
									"\r",
									"    }\r",
									"} \r",
									"pm.sendRequest(postRequest, (err, response) =>  {\r",
									"    const res = response.json()\r",
									"\r",
									"    console.log (err ? err : res);\r",
									"    try {\r",
									"         //se der certo \r",
									"\r",
									"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
									"        console.log (res.authorization.slice(7))\r",
									"\r",
									"    } catch {\r",
									"\r",
									"        // se der erro \r",
									"        console.warn ('FAIL')\r",
									"    }\r",
									"});\r",
									"// - // "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"console.log (response)\r",
									"\r",
									"const atributos =[\"message\"]\r",
									"\r",
									"atributos.forEach((atributo)=> {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
									"        pm.expect (response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"pm.test(\"Mensagem correta retornada\",()=>{\r",
									"    pm.expect(response.message).have.string(\"Cadastro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"O Código tem que ser 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"POST com sucesso\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code deu a resposta em String\", function () {\r",
									"    pm.response.to.have.status('Created');\r",
									"});\r",
									"\r",
									"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"// - // \r",
									"//  Validacao de Header // \r",
									"\r",
									"pm.test(\"Content-Type está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									" // - // \r",
									"\r",
									"// Consulta se o usuário foi realmente criado // \r",
									"\r",
									"pm.test(\"Confirma se o usuário foi cadastrado\", function (){\r",
									"const response = pm.response.json();\r",
									"pm.environment.set('id', response._id);\r",
									"})\r",
									"\r",
									"let url = pm.environment.get('baseURL');\r",
									"let id = pm.environment.get('id');\r",
									"\r",
									"const  getUser = {\r",
									"    url: `${url}/usuarios/${id}`,   //variavel\r",
									"    method: 'GET',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"\r",
									"    }\r",
									" }\r",
									"\r",
									"pm.sendRequest(getUser,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"\r",
									"\r",
									"})\r",
									"\r",
									"// Excluir usuario que acabou de criar // \r",
									"\r",
									"pm.test(\"Excluir usuário\", function (){\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set('idProd', response._id);\r",
									"})\r",
									"\r",
									"let token = 'Bearer ' + pm.environment.get('token')\r",
									"console.log(pm.environment.get('token'))\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"const  delUser = {\r",
									"    url: ` ${url}/usuarios/${id}`,   \r",
									"    method: 'DELETE',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json',\r",
									"         'Authorization' :` ${token}`\r",
									"\r",
									"    }\r",
									" }\r",
									"\r",
									"pm.sendRequest(delUser,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"\r",
									"\r",
									"})\r",
									"\r",
									"// - // \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n            \"nome\": \"Tester\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"54321\",\r\n            \"administrador\": \"true\"\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/usuarios"
					},
					"response": []
				},
				{
					"name": "Deletar usuário",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseURL')\r",
									"\r",
									"\r",
									"const  postrequest = {\r",
									"    url: `${url}/usuarios`,   //variavel\r",
									"    method: 'POST',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json'\r",
									"\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"               \r",
									"            \"nome\": \"Delete Teste \",\r",
									"            \"email\": \"deleteteste@gmail.com\",\r",
									"            \"password\": \"testea\",\r",
									"            \"administrador\": \"true\"\r",
									"        }\r",
									"            )\r",
									"\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(postrequest,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        //operacao\r",
									"        pm.environment.set(\"idU\", response.json()._id)\r",
									"\r",
									"\r",
									"    } catch {\r",
									"        //operacao\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"})\r",
									"\r",
									"\r",
									"// LOGIN // \r",
									"\r",
									"const postRequest = {\r",
									"    url: `${url}/login`, \r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type':'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode:'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"email\": \"testerQA@hotmail.com\",\r",
									"       \"password\": \"testeQA\"\r",
									"})\r",
									"\r",
									"    }\r",
									"} \r",
									"pm.sendRequest(postRequest, (err, response) =>  {\r",
									"    const res = response.json()\r",
									"\r",
									"    console.log (err ? err : res);\r",
									"    try {\r",
									"         //se der certo \r",
									"\r",
									"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
									"        console.log (res.authorization.slice(7))\r",
									"\r",
									"    } catch {\r",
									"\r",
									"        // se der erro \r",
									"        console.warn ('FAIL')\r",
									"    }\r",
									"});\r",
									"// - // \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"O Código tem que ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"DELETE com sucesso\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code deu a resposta em String\", function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"});\r",
									"\r",
									"const atributos = [\"message\"]\r",
									"const response = pm.response.json()\r",
									"\r",
									"atributos.forEach((atributo)=> {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
									"        pm.expect (response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"// - // \r",
									"//  Validacao de Header // \r",
									"\r",
									"pm.test(\"Content-Type está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									" // - // \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{baseURL}}/usuarios/wLkL6xyiIerLbpbo"
					},
					"response": []
				}
			]
		},
		{
			"name": "/produtos",
			"item": [
				{
					"name": "Listar produtos cadastrados",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TESTES // \r",
									"\r",
									"\r",
									"const response = pm.response.json()\r",
									"console.log (response)\r",
									"\r",
									"const atributos =[\"quantidade\", \"produtos\"]\r",
									"\r",
									"atributos.forEach((atributo)=> {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
									"        pm.expect (response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"\r",
									" pm.test(\"O Código tem que ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									" pm.test(\"POST com sucesso\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code deu a resposta em String\", function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"\r",
									"});\r",
									"\r",
									"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"\r",
									"});\r",
									"\r",
									"//  Validacao de Header // \r",
									"\r",
									"pm.test(\"Content-Type está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									" // - // "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// LOGIN // \r",
									"const url = pm.environment.get('baseURL')\r",
									"const postRequest = {\r",
									"    url: `${url}/login`, \r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type':'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode:'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"email\": \"testerQA@hotmail.com\",\r",
									"       \"password\": \"testeQA\"\r",
									"})\r",
									"\r",
									"    }\r",
									"} \r",
									"pm.sendRequest(postRequest, (err, response) =>  {\r",
									"    const res = response.json()\r",
									"\r",
									"    console.log (err ? err : res);\r",
									"    try {\r",
									"         //se der certo \r",
									"\r",
									"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
									"        console.log (res.authorization.slice(7))\r",
									"\r",
									"    } catch {\r",
									"\r",
									"        // se der erro \r",
									"        console.warn ('FAIL')\r",
									"    }\r",
									"});\r",
									"// - // "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/produtos"
					},
					"response": []
				},
				{
					"name": "Buscar produto por id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"O Código tem que ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"GET com sucesso\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code deu a resposta em String\", function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"});\r",
									"\r",
									"const atributos = [\"nome\", \"preco\",\"descricao\",\"quantidade\",\"_id\"]\r",
									"const response = pm.response.json()\r",
									"\r",
									"atributos.forEach((atributo)=> {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
									"        pm.expect (response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									" pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"// - // \r",
									"//  Validacao de Header // \r",
									"\r",
									"pm.test(\"Content-Type está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									" // - // \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// LOGIN // \r",
									"const url = pm.environment.get('baseURL')\r",
									"const postRequest = {\r",
									"    url: `${url}/login`, \r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type':'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode:'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"email\": \"testerQA@hotmail.com\",\r",
									"       \"password\": \"testeQA\"\r",
									"})\r",
									"\r",
									"    }\r",
									"} \r",
									"pm.sendRequest(postRequest, (err, response) =>  {\r",
									"    const res = response.json()\r",
									"\r",
									"    console.log (err ? err : res);\r",
									"    try {\r",
									"         //se der certo \r",
									"\r",
									"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
									"        console.log (res.authorization.slice(7))\r",
									"\r",
									"    } catch {\r",
									"\r",
									"        // se der erro \r",
									"        console.warn ('FAIL')\r",
									"    }\r",
									"});\r",
									"// - // "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{baseURL}}/produtos/rB64pfhbjqbBCgr8"
					},
					"response": []
				},
				{
					"name": "Editar produto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"O Código tem que ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"PUT com sucesso\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code deu a resposta em String\", function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"});\r",
									"\r",
									"const atributos = [\"message\"]\r",
									"const response = pm.response.json()\r",
									"\r",
									"atributos.forEach((atributo)=> {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
									"        pm.expect (response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"// - // \r",
									"//  Validacao de Header // \r",
									"\r",
									"pm.test(\"Content-Type está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									" // - // \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// LOGIN // \r",
									"const url = pm.environment.get('baseURL')\r",
									"const postRequest = {\r",
									"    url: `${url}/login`, \r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type':'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode:'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"email\": \"testerQA@hotmail.com\",\r",
									"       \"password\": \"testeQA\"\r",
									"})\r",
									"\r",
									"    }\r",
									"} \r",
									"pm.sendRequest(postRequest, (err, response) =>  {\r",
									"    const res = response.json()\r",
									"\r",
									"    console.log (err ? err : res);\r",
									"    try {\r",
									"         //se der certo \r",
									"\r",
									"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
									"        console.log (res.authorization.slice(7))\r",
									"\r",
									"    } catch {\r",
									"\r",
									"        // se der erro \r",
									"        console.warn ('FAIL')\r",
									"    }\r",
									"});\r",
									"// - // "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n            \"nome\": \"Chips\",\r\n\r\n            \"preco\": 55,\r\n\r\n            \"descricao\": \"Metal\",\r\n\r\n            \"quantidade\": 0\r\n\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/produtos/TEVdbKQbKEAW39hx"
					},
					"response": []
				},
				{
					"name": "Cadastrar produto",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseURL')\r",
									"\r",
									"// LOGIN // \r",
									"\r",
									"const postRequest = {\r",
									"    url: `${url}/login`, \r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type':'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode:'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"email\": \"testerQA@hotmail.com\",\r",
									"       \"password\": \"testeQA\"\r",
									"})\r",
									"\r",
									"    }\r",
									"} \r",
									"pm.sendRequest(postRequest, (err, response) =>  {\r",
									"    const res = response.json()\r",
									"\r",
									"    console.log (err ? err : res);\r",
									"    try {\r",
									"         //se der certo \r",
									"\r",
									"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
									"        console.log (res.authorization.slice(7))\r",
									"\r",
									"    } catch {\r",
									"\r",
									"        // se der erro \r",
									"        console.warn ('FAIL')\r",
									"    }\r",
									"});\r",
									"// - // "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"O Código tem que ser 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"POST com sucesso\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code deu a resposta em String\", function () {\r",
									"    pm.response.to.have.status('Created');\r",
									"});\r",
									"\r",
									"const atributos = [\"message\"]\r",
									"const response = pm.response.json()\r",
									"\r",
									"atributos.forEach((atributo)=> {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
									"        pm.expect (response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"// - // \r",
									"//  Validacao de Header // \r",
									"\r",
									"pm.test(\"Content-Type está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									" // - // \r",
									"\r",
									"\r",
									"\r",
									"// Excluir produto // \r",
									"\r",
									"pm.test(\"Excluir produto\", function (){\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set('idProd', response._id);\r",
									"})\r",
									"\r",
									"let token = 'Bearer ' + pm.environment.get('token')\r",
									"console.log(pm.environment.get('token'))\r",
									"\r",
									"const url = pm.environment.get('baseURL');\r",
									"const id = pm.environment.get('idProd');\r",
									"\r",
									"\r",
									"const  delUser = {\r",
									"    url: ` ${url}/produtos/${id}`,   \r",
									"    method: 'DELETE',\r",
									"    header: { \r",
									"        'Content-Type' : 'application/json',\r",
									"         'Authorization' :` ${token}`\r",
									"\r",
									"    }\r",
									" }\r",
									"\r",
									"pm.sendRequest(delUser,  (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"\r",
									"\r",
									"})\r",
									"\r",
									"// - // "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\":\"{{$randomProductName}}\",\r\n\r\n    \"preco\":50,\r\n\r\n    \"descricao\":\"{{$randomProductMaterial}}\",\r\n\r\n    \"quantidade\":20\r\n    \r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/produtos"
					},
					"response": []
				},
				{
					"name": "Deletar produto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"O Código tem que ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"DELETE com sucesso\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code deu a resposta em String\", function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"});\r",
									"\r",
									"const atributos = [\"message\"]\r",
									"const response = pm.response.json()\r",
									"\r",
									"atributos.forEach((atributo)=> {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
									"        pm.expect (response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"// - // \r",
									"//  Validacao de Header // \r",
									"\r",
									"pm.test(\"Content-Type está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									" // - // "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// LOGIN // \r",
									"const url = pm.environment.get('baseURL')\r",
									"const postRequest = {\r",
									"    url: `${url}/login`, \r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type':'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode:'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"email\": \"testerQA@hotmail.com\",\r",
									"       \"password\": \"testeQA\"\r",
									"})\r",
									"\r",
									"    }\r",
									"} \r",
									"pm.sendRequest(postRequest, (err, response) =>  {\r",
									"    const res = response.json()\r",
									"\r",
									"    console.log (err ? err : res);\r",
									"    try {\r",
									"         //se der certo \r",
									"\r",
									"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
									"        console.log (res.authorization.slice(7))\r",
									"\r",
									"    } catch {\r",
									"\r",
									"        // se der erro \r",
									"        console.warn ('FAIL')\r",
									"    }\r",
									"});\r",
									"// - // "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{baseURL}}/produtos/q3q79shCbVKWo3Du"
					},
					"response": []
				}
			]
		},
		{
			"name": "/carrinhos",
			"item": [
				{
					"name": "CompraCancelada",
					"item": [
						{
							"name": "Listar carrinhos cadastrados Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O Código tem que ser 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"GET com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"const atributos = [\"quantidade\", \"carrinhos\"]\r",
											"const response = pm.response.json()\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/carrinhos"
							},
							"response": []
						},
						{
							"name": "Buscar carrinho por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O Código tem que ser 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"GET com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"const atributos = [\"produtos\"]\r",
											"const response = pm.response.json()\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{baseURL}}/carrinhos/qbMqntef4iTOwWfg"
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinhos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"8BFnbAiZimikVCpY\",\r\n      \"quantidade\": 5\r\n    },\r\n    {\r\n      \"idProduto\": \"ACVMgqdAAKZwD1oQ\",\r\n      \"quantidade\": 5\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/carrinhos"
							},
							"response": []
						},
						{
							"name": "Deletar carrinho CompraCancelada",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O Código tem que ser 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"GET com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"const atributos = [\"message\"]\r",
											"const response = pm.response.json()\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											" pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{baseURL}}/carrinhos/cancelar-compra"
							},
							"response": []
						}
					]
				},
				{
					"name": "CompraEfetuada",
					"item": [
						{
							"name": "Listar carrinhos cadastrados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O Código tem que ser 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"GET com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"const atributos = [\"quantidade\", \"carrinhos\"]\r",
											"const response = pm.response.json()\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											" pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/carrinhos"
							},
							"response": []
						},
						{
							"name": "Buscar carrinho por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O Código tem que ser 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"GET com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"const atributos = [\"produtos\"]\r",
											"const response = pm.response.json()\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											" pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{baseURL}}/carrinhos/qbMqntef4iTOwWfg"
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinhos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O Código tem que ser 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"POST com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Created');\r",
											"});\r",
											"\r",
											"const atributos = [\"message\"]\r",
											"const response = pm.response.json()\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/carrinhos"
							},
							"response": []
						},
						{
							"name": "Deletar carrinho CompraEfetuada",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O Código tem que ser 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"GET com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"const atributos = [\"message\"]\r",
											"const response = pm.response.json()\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											" pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{baseURL}}/carrinhos/concluir-compra"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Fluxo de compras ( Compra Efetuada)",
			"item": [
				{
					"name": "Realizar Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() \r",
									"\r",
									"\r",
									"pm.environment.set(\"token\", response.authorization.slice(7));\r",
									"\r",
									"\r",
									"// TESTES // \r",
									"\r",
									" pm.test(\"O Código tem que ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									" pm.test(\"POST com sucesso\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code deu a resposta em String\", function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"\r",
									"});\r",
									"\r",
									"const atributos = [\"message\",\"authorization\"]\r",
									"\r",
									"\r",
									"atributos.forEach((atributo)=> {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
									"        pm.expect(pm.response.json()[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"// - // \r",
									"//  Validacao de Header // \r",
									"\r",
									"pm.test(\"Content-Type está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									" // - // \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// LOGIN // \r",
									"const url = pm.environment.get('baseURL')\r",
									"const postRequest = {\r",
									"    url: `${url}/login`, \r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type':'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode:'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"email\": \"Ladarius15@hotmail.com\",\r",
									"       \"password\": \"testea\"\r",
									"})\r",
									"\r",
									"    }\r",
									"} \r",
									"pm.sendRequest(postRequest, (err, response) =>  {\r",
									"    const res = response.json()\r",
									"\r",
									"    console.log (err ? err : res);\r",
									"    try {\r",
									"         //se der certo \r",
									"\r",
									"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
									"        console.log (res.authorization.slice(7))\r",
									"\r",
									"    } catch {\r",
									"\r",
									"        // se der erro \r",
									"        console.warn ('FAIL')\r",
									"    }\r",
									"});\r",
									"// - // "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"testerQA@hotmail.com\",\r\n  \"password\": \"testeQA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login"
					},
					"response": []
				},
				{
					"name": "Cadastrar Carrinho",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// LOGIN // \r",
									"const url = pm.environment.get('baseURL')\r",
									"const postRequest = {\r",
									"    url: `${url}/login`, \r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type':'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode:'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"email\": \"Ladarius15@hotmail.com\",\r",
									"       \"password\": \"testea\"\r",
									"})\r",
									"\r",
									"    }\r",
									"} \r",
									"pm.sendRequest(postRequest, (err, response) =>  {\r",
									"    const res = response.json()\r",
									"\r",
									"    console.log (err ? err : res);\r",
									"    try {\r",
									"         //se der certo \r",
									"\r",
									"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
									"        console.log (res.authorization.slice(7))\r",
									"\r",
									"    } catch {\r",
									"\r",
									"        // se der erro \r",
									"        console.warn ('FAIL')\r",
									"    }\r",
									"});\r",
									"// - // "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"O Código tem que ser 200\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"GET com sucesso\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code deu a resposta em String\", function () {\r",
									"    pm.response.to.have.status('Created');\r",
									"});\r",
									"\r",
									"const atributos = [\"message\"]\r",
									"const response = pm.response.json()\r",
									"\r",
									"atributos.forEach((atributo)=> {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
									"        pm.expect (response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									" pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"\r",
									"});\r",
									"\r",
									"//  Validacao de Header // \r",
									"\r",
									"pm.test(\"Content-Type está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									" // - // "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/carrinhos"
					},
					"response": []
				},
				{
					"name": "Excluir Carrinho ( Conclusão de compra )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// LOGIN // \r",
									"const url = pm.environment.get('baseURL')\r",
									"const postRequest = {\r",
									"    url: `${url}/login`, \r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type':'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode:'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"email\": \"Ladarius15@hotmail.com\",\r",
									"       \"password\": \"testea\"\r",
									"})\r",
									"\r",
									"    }\r",
									"} \r",
									"pm.sendRequest(postRequest, (err, response) =>  {\r",
									"    const res = response.json()\r",
									"\r",
									"    console.log (err ? err : res);\r",
									"    try {\r",
									"         //se der certo \r",
									"\r",
									"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
									"        console.log (res.authorization.slice(7))\r",
									"\r",
									"    } catch {\r",
									"\r",
									"        // se der erro \r",
									"        console.warn ('FAIL')\r",
									"    }\r",
									"});\r",
									"// - // "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"O Código tem que ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"GET com sucesso\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code deu a resposta em String\", function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"});\r",
									"\r",
									"const atributos = [\"message\"]\r",
									"const response = pm.response.json()\r",
									"\r",
									"atributos.forEach((atributo)=> {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
									"        pm.expect (response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									" pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"\r",
									"});\r",
									"\r",
									"//  Validacao de Header // \r",
									"\r",
									"pm.test(\"Content-Type está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									" // - // "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/carrinhos/concluir-compra"
					},
					"response": []
				}
			]
		},
		{
			"name": "Fluxo de compras (Compra Cancelada )",
			"item": [
				{
					"name": "Realizar Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json() \r",
									"\r",
									"\r",
									"pm.environment.set(\"token\", response.authorization.slice(7));\r",
									"\r",
									"\r",
									"// TESTES // \r",
									"\r",
									" pm.test(\"O Código tem que ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									" pm.test(\"POST com sucesso\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code deu a resposta em String\", function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"\r",
									"});\r",
									"\r",
									"const atributos = [\"message\",\"authorization\"]\r",
									"\r",
									"\r",
									"atributos.forEach((atributo)=> {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
									"        pm.expect(pm.response.json()[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"// - // \r",
									"//  Validacao de Header // \r",
									"\r",
									"pm.test(\"Content-Type está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									" // - // \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// LOGIN // \r",
									"const url = pm.environment.get('baseURL')\r",
									"const postRequest = {\r",
									"    url: `${url}/login`, \r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type':'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode:'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"email\": \"testerQA@hotmail.com\",\r",
									"       \"password\": \"testeQA\"\r",
									"})\r",
									"\r",
									"    }\r",
									"} \r",
									"pm.sendRequest(postRequest, (err, response) =>  {\r",
									"    const res = response.json()\r",
									"\r",
									"    console.log (err ? err : res);\r",
									"    try {\r",
									"         //se der certo \r",
									"\r",
									"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
									"        console.log (res.authorization.slice(7))\r",
									"\r",
									"    } catch {\r",
									"\r",
									"        // se der erro \r",
									"        console.warn ('FAIL')\r",
									"    }\r",
									"});\r",
									"// - // "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"testerQA@hotmail.com\",\r\n  \"password\": \"testeQA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login"
					},
					"response": []
				},
				{
					"name": "Cadastrar Carrinho",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// LOGIN // \r",
									"const url = pm.environment.get('baseURL')\r",
									"const postRequest = {\r",
									"    url: `${url}/login`, \r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type':'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode:'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"email\": \"testerQA@hotmail.com\",\r",
									"       \"password\": \"testeQA\"\r",
									"})\r",
									"\r",
									"    }\r",
									"} \r",
									"pm.sendRequest(postRequest, (err, response) =>  {\r",
									"    const res = response.json()\r",
									"\r",
									"    console.log (err ? err : res);\r",
									"    try {\r",
									"         //se der certo \r",
									"\r",
									"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
									"        console.log (res.authorization.slice(7))\r",
									"\r",
									"    } catch {\r",
									"\r",
									"        // se der erro \r",
									"        console.warn ('FAIL')\r",
									"    }\r",
									"});\r",
									"// - // "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"O Código tem que ser 200\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"GET com sucesso\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code deu a resposta em String\", function () {\r",
									"    pm.response.to.have.status('Created');\r",
									"});\r",
									"\r",
									"const atributos = [\"message\"]\r",
									"const response = pm.response.json()\r",
									"\r",
									"atributos.forEach((atributo)=> {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
									"        pm.expect (response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									" pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"\r",
									"});\r",
									"\r",
									"//  Validacao de Header // \r",
									"\r",
									"pm.test(\"Content-Type está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									" // - // "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/carrinhos"
					},
					"response": []
				},
				{
					"name": "Excluir Carrinho ( Cancelamento de Compra  )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// LOGIN // \r",
									"const url = pm.environment.get('baseURL')\r",
									"const postRequest = {\r",
									"    url: `${url}/login`, \r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type':'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode:'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"email\": \"testerQA@hotmail.com\",\r",
									"       \"password\": \"testeQA\"\r",
									"})\r",
									"\r",
									"    }\r",
									"} \r",
									"pm.sendRequest(postRequest, (err, response) =>  {\r",
									"    const res = response.json()\r",
									"\r",
									"    console.log (err ? err : res);\r",
									"    try {\r",
									"         //se der certo \r",
									"\r",
									"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
									"        console.log (res.authorization.slice(7))\r",
									"\r",
									"    } catch {\r",
									"\r",
									"        // se der erro \r",
									"        console.warn ('FAIL')\r",
									"    }\r",
									"});\r",
									"// - // "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"O Código tem que ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"GET com sucesso\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status Code deu a resposta em String\", function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"});\r",
									"\r",
									"const atributos = [\"message\"]\r",
									"const response = pm.response.json()\r",
									"\r",
									"atributos.forEach((atributo)=> {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
									"        pm.expect (response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									" pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"\r",
									"});\r",
									"\r",
									"//  Validacao de Header // \r",
									"\r",
									"pm.test(\"Content-Type está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-frame-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"strict-transport-security está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-download-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-content-type-options está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-xss-protection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\");\r",
									"});\r",
									"\r",
									"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Keep-Alive está presente no header\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									"\r",
									" // - // "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/carrinhos/cancelar-compra"
					},
					"response": []
				}
			]
		},
		{
			"name": "CT TESTES",
			"item": [
				{
					"name": "CT LOGIN",
					"item": [
						{
							"name": "CT01 Realizar Login ( sem @)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TESTES // \r",
											"\r",
											" pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"POST sem sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"\r",
											"});\r",
											"\r",
											"const atributos = [\"email\"]\r",
											"\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"testerQA hotmail.com\",\r\n  \"password\": \"testeQA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/login"
							},
							"response": []
						},
						{
							"name": "CT02 Realizar Login ( sem o provedor )",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TESTES // \r",
											"\r",
											" pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"POST sem sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"\r",
											"});\r",
											"\r",
											"const atributos = [\"email\"]\r",
											"\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"testerQA@ .com\",\r\n  \"password\": \"testeQA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/login"
							},
							"response": []
						},
						{
							"name": "CT03 Realizar Login ( sem o email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TESTES // \r",
											"\r",
											" pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"POST sem sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"\r",
											"});\r",
											"\r",
											"const atributos = [\"email\"]\r",
											"\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"testeQA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/login"
							},
							"response": []
						},
						{
							"name": "CT04 Realizar Login ( sem a senha)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TESTES // \r",
											"\r",
											" pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"POST sem sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"\r",
											"});\r",
											"\r",
											"const atributos = [\"password\"]\r",
											"\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"testerQA@hotmail.com\",\r\n  \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/login"
							},
							"response": []
						},
						{
							"name": "CT05 Realizar Login ( email sem maiusculo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TESTES // \r",
											"\r",
											" pm.test(\"O Código tem que ser 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"POST sem sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"\r",
											"});\r",
											"\r",
											"const atributos = [\"message\"]\r",
											"\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"testerQa@hotmail.com\",\r\n  \"password\": \"testeQA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/login"
							},
							"response": []
						},
						{
							"name": "CT06 Realizar Login ( senha sem maiusculo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TESTES // \r",
											"\r",
											" pm.test(\"O Código tem que ser 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"POST sem sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"\r",
											"});\r",
											"\r",
											"const atributos = [\"message\"]\r",
											"\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"testerQA@hotmail.com\",\r\n  \"password\": \"testeqA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/login"
							},
							"response": []
						},
						{
							"name": "CT07 Realizar Login ( sem .com)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TESTES // \r",
											"\r",
											" pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"POST sem sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"\r",
											"});\r",
											"\r",
											"const atributos = [\"email\"]\r",
											"\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"testerQA@hotmail\",\r\n  \"password\": \"testeQA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/login"
							},
							"response": []
						},
						{
							"name": "CT08 Realizar Login ( com virgula no lugar do ponto)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TESTES // \r",
											"\r",
											" pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"POST sem sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"\r",
											"});\r",
											"\r",
											"const atributos = [\"email\"]\r",
											"\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"testerQA@hotmail,com\",\r\n  \"password\": \"testeQA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/login"
							},
							"response": []
						},
						{
							"name": "CT09 Realizar Login ( sem ponto)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TESTES // \r",
											"\r",
											" pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"POST sem sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"\r",
											"});\r",
											"\r",
											"const atributos = [\"email\"]\r",
											"\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"testerQA@hotmail com\",\r\n  \"password\": \"testeQA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/login"
							},
							"response": []
						},
						{
							"name": "CT10 Realizar Login ( provedor incorreto)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TESTES // \r",
											"\r",
											" pm.test(\"O Código tem que ser 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"POST sem sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"\r",
											"});\r",
											"\r",
											"const atributos = [\"message\"]\r",
											"\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"testerQA@gmail.com\",\r\n  \"password\": \"testeQA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/login"
							},
							"response": []
						},
						{
							"name": "CT11 Realizar Login ( senha incorreta)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TESTES // \r",
											"\r",
											" pm.test(\"O Código tem que ser 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"POST sem sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"\r",
											"});\r",
											"\r",
											"const atributos = [\"message\"]\r",
											"\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"testerQA@hotmail.com\",\r\n  \"password\": \"testeQA1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/login"
							},
							"response": []
						}
					]
				},
				{
					"name": "CT USUÁRIOS",
					"item": [
						{
							"name": "ERRO",
							"item": [
								{
									"name": "CT/ERRO12 Cadastrar usuário (com ***)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// TESTES // \r",
													"\r",
													" pm.test(\"O Código tem que ser 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													" pm.test(\"POST não deve ser feito \", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([401,400]);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('Unauthorized');\r",
													"\r",
													"});\r",
													"\r",
													"const atributos = [\"message\"]\r",
													"\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// - // \r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													" // - // \r",
													" // Excluir usuário //\r",
													"\r",
													"pm.test(\"Excluir usuario\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('idU', response._id);\r",
													"})\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('idU');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: ` ${url}/usuarios/${id}`,   \r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"// - //"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"teste\",\r\n  \"email\": \"loginsem***@gmail.com\",\r\n  \"password\": \"{{senhaValida}}\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/usuarios"
									},
									"response": []
								},
								{
									"name": "CT/ERRO13 Cadastrar usuário (caracteres estranhos )",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// TESTES // \r",
													"\r",
													" pm.test(\"O Código tem que ser 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													" pm.test(\"POST não deve ser feito \", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('Unauthorized');\r",
													"\r",
													"});\r",
													"\r",
													"const atributos = [\"message\"]\r",
													"\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// - // \r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													" // - // \r",
													"\r",
													" // Excluir usuário //\r",
													"\r",
													"pm.test(\"Excluir usuario\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('idU', response._id);\r",
													"})\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('idU');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: ` ${url}/usuarios/${id}`,   \r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"// - //\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Teste\",\r\n  \"email\": \"testeqa#@hotmail.com\",\r\n  \"password\": \"123\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/usuarios"
									},
									"response": []
								},
								{
									"name": "CT/ERRO14 Cadastrar usuário (senha invalida)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// TESTES // \r",
													"\r",
													" pm.test(\"O Código tem que ser 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													" pm.test(\"POST não deve ser feito \", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([401,400]);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"\r",
													"});\r",
													"\r",
													"const atributos = [\"password\"]\r",
													"\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// - // \r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													" // - // \r",
													"\r",
													" // Excluir usuário //\r",
													"\r",
													"pm.test(\"Excluir usuario\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('idU', response._id);\r",
													"})\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('idU');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: ` ${url}/usuarios/${id}`,   \r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"// - //\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\" : \"teste\", \r\n  \"email\": \"fulano1@qa.com\",\r\n  \"password\": \"***_%()!!@+\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/usuarios"
									},
									"response": []
								},
								{
									"name": "CT/ERRO22 Deletar usuário (excluir usuario que ja foi excluido)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"\r",
													"\r",
													"const  postrequest = {\r",
													"    url: `${url}/usuarios`,   //variavel\r",
													"    method: 'POST',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json'\r",
													"\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"               \r",
													"            \"nome\": \"Delete Teste \",\r",
													"            \"email\": \"deleteteste@gmail.com\",\r",
													"            \"password\": \"testea\",\r",
													"            \"administrador\": \"true\"\r",
													"        }\r",
													"            )\r",
													"\r",
													"    }\r",
													"}\r",
													"pm.sendRequest(postrequest,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"    try {\r",
													"        //operacao\r",
													"        pm.environment.set(\"idU\", response.json()._id)\r",
													"\r",
													"\r",
													"    } catch {\r",
													"        //operacao\r",
													"        console.warn('FAIL')\r",
													"    }\r",
													"})\r",
													"\r",
													"\r",
													"// LOGIN // \r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"        \"email\": \"testerQA@hotmail.com\",\r",
													"       \"password\": \"testeQA\"\r",
													"})\r",
													"\r",
													"    }\r",
													"} \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});\r",
													"// - // \r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"O Código tem que ser 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"DELETE sem sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"const atributos = [\"message\"]\r",
													"const response = pm.response.json()\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect (response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// - // \r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													" // - // \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "{{baseURL}}/usuarios/bPpOYcaz0a4w4igF"
									},
									"response": []
								}
							]
						},
						{
							"name": "CT15 Cadastrar usuário (login sem @)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TESTES // \r",
											"\r",
											" pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"POST não deve ser feito \", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401,400]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"\r",
											"});\r",
											"\r",
											"const atributos = [\"email\"]\r",
											"\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											" // Excluir usuário //\r",
											"\r",
											"pm.test(\"Excluir usuario\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idU', response._id);\r",
											"})\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('idU');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: ` ${url}/usuarios/${id}`,   \r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"// - //"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"teste\",\r\n  \"email\": \"loginsem gmail.com\",\r\n  \"password\": \"{{senhaValida}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios"
							},
							"response": []
						},
						{
							"name": "CT16 Cadastrar usuário (sem o ponto com )",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TESTES // \r",
											"\r",
											" pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"POST não deve ser feito \", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401,400]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"\r",
											"});\r",
											"\r",
											"const atributos = [\"email\"]\r",
											"\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											" // Excluir usuário //\r",
											"\r",
											"pm.test(\"Excluir usuario\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idU', response._id);\r",
											"})\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('idU');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: ` ${url}/usuarios/${id}`,   \r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"// - //"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"teste\",\r\n  \"email\": \"fulano@qa\",\r\n  \"password\": \"{{senhaInvalida}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios"
							},
							"response": []
						},
						{
							"name": "CT17 Cadastrar usuário (sem provedor )",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TESTES // \r",
											"\r",
											" pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400,401);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"POST não deve ser feito \", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401,400]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"\r",
											"});\r",
											"\r",
											"const atributos = [\"email\"]\r",
											"\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											" // Excluir usuário //\r",
											"\r",
											"pm.test(\"Excluir usuario\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idU', response._id);\r",
											"})\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('idU');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: ` ${url}/usuarios/${id}`,   \r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"// - //"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\" : \"teste\", \r\n  \"email\": \"fulano@ .com\",\r\n  \"password\": \"{{senhaInvalida}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios"
							},
							"response": []
						},
						{
							"name": "CT18 Cadastrar usuário (com email vazio)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TESTES // \r",
											"\r",
											" pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"POST não deve ser feito \", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401,400]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"\r",
											"});\r",
											"\r",
											"const atributos = [\"email\"]\r",
											"\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											" // Excluir usuário //\r",
											"\r",
											"pm.test(\"Excluir usuario\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idU', response._id);\r",
											"})\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('idU');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: ` ${url}/usuarios/${id}`,   \r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"// - //"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"teste\",\r\n  \"email\": \"{{emailVazio}}\",\r\n  \"password\": \"{{senhaValida}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios"
							},
							"response": []
						},
						{
							"name": "CT19 Cadastrar usuário (senha vazia)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TESTES // \r",
											"\r",
											" pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"POST não deve ser feito \", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401,400]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"\r",
											"});\r",
											"\r",
											"const atributos = [\"password\"]\r",
											"\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											" // Excluir usuário //\r",
											"\r",
											"pm.test(\"Excluir usuario\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idU', response._id);\r",
											"})\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('idU');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: ` ${url}/usuarios/${id}`,   \r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"// - //\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "   {\r\n            \"nome\": \"Teste Testezinho\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\":\"\",\r\n            \"administrador\": \"true\"\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios"
							},
							"response": []
						},
						{
							"name": "CT20 Cadastrar usuário(senha com numero)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TESTES // \r",
											"\r",
											" pm.test(\"O Código tem que ser 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"POST deve ser feito \", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Created');\r",
											"\r",
											"});\r",
											"\r",
											"const atributos = [\"message\"]\r",
											"\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											" // Excluir usuário //\r",
											"\r",
											"pm.test(\"Excluir usuario\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idU', response._id);\r",
											"})\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('idU');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: ` ${url}/usuarios/${id}`,   \r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"// - //"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"nome\" : \"teste\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\":\"amanda2401\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios"
							},
							"response": []
						},
						{
							"name": "CT21 Cadastrar usuário (repetido)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TESTES // \r",
											"\r",
											" pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"POST não deve ser feito \", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"\r",
											"});\r",
											"\r",
											"const atributos = [\"message\"]\r",
											"\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											" // Excluir usuário //\r",
											"\r",
											"pm.test(\"Excluir usuario\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idU', response._id);\r",
											"})\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('idU');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: ` ${url}/usuarios/${id}`,   \r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"// - //"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "   {\r\n            \"nome\": \"Teste Testezinho\",\r\n            \"email\": \"teste@hotmail.com\",\r\n            \"password\": \"teste1\",\r\n            \"administrador\": \"true\"\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios"
							},
							"response": []
						},
						{
							"name": "CT23 Cadastrar usuário ( enviar o id para o delete)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log (response)\r",
											"\r",
											"const atributos =[\"message\"]\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"pm.test(\"Mensagem correta retornada\",()=>{\r",
											"    pm.expect(response.message).have.string(\"Cadastro realizado com sucesso\")\r",
											"})\r",
											"\r",
											"pm.test(\"O Código tem que ser 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"POST com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Created');\r",
											"});\r",
											"\r",
											"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											"// Consulta se o usuário foi realmente criado // \r",
											"\r",
											"pm.test(\"Confirma se o usuário foi cadastrado\", function (){\r",
											"const response = pm.response.json();\r",
											"pm.environment.set('id', response._id);\r",
											"})\r",
											"\r",
											"let url = pm.environment.get('baseURL');\r",
											"let id = pm.environment.get('id');\r",
											"\r",
											"const  getUser = {\r",
											"    url: `${url}/usuarios/${id}`,   //variavel\r",
											"    method: 'GET',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(getUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"// Envia o e-mail para deletar// \r",
											"pm.test(\"Envia id para variável de ambiente.\", function (){\r",
											"const response = pm.response.json();\r",
											"pm.environment.set('idteste', response._id);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "   {\r\n            \"nome\": \"Tester\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"54321\",\r\n            \"administrador\": \"true\"\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios"
							},
							"response": []
						},
						{
							"name": "CT24  Deletar usuário (excluir usuario pela id de criação anterior)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"// LOGIN // \r",
											"\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											" // excluir usuario pela id de criação anterior//\r",
											"\r",
											"\r",
											"pm.test(\"O Código tem que ser 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"DELETE sem sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 50ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"const atributos = [\"message\"]\r",
											"const response = pm.response.json()\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											"\r",
											"pm.test(\"Confirma se o usuário realmente foi excluído\", function (){\r",
											"const response = pm.response.json();\r",
											"pm.environment.set('idteste', response._id);\r",
											"})\r",
											"\r",
											"let url = pm.environment.get('baseURL');\r",
											"let id = pm.environment.get('idteste');\r",
											"\r",
											"const  getUser = {\r",
											"    url: `${url}/usuarios/${id}`,   \r",
											"    method: 'GET',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json'\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(getUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{baseURL}}/usuarios/{{idteste}}"
							},
							"response": []
						},
						{
							"name": "CT25 Editar usuário (não fazendo nenhuma alteração )",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O Código tem que ser 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"PUT com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"const atributos = [\"message\"]\r",
											"const response = pm.response.json()\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n           \"nome\": \"UsuarioComum\",\r\n\r\n            \"email\": \"testeComum@hotmail.com\",\r\n\r\n            \"password\": \"teste1\",\r\n            \r\n            \"administrador\": \"false\" \r\n           \r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios/X87MdgPpiDvezVTo"
							},
							"response": []
						}
					]
				},
				{
					"name": "CT PRODUTOS",
					"item": [
						{
							"name": "ERRO",
							"item": [
								{
									"name": "CT/ERRO26 Cadastrar produto (nome com caractere estranho)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Cadastrar o mesmo Produto \r",
													"\r",
													"\r",
													"\r",
													"const url = pm.environment.get('baseURL')\r",
													"//\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"        \"email\": \"fulano@qa.com\",\r",
													"       \"password\": \"teste\"\r",
													"})\r",
													"\r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"// \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"O Código tem que ser 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Não tem que fazer POST\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"const atributos = [\"preco\"]\r",
													"const response = pm.response.json()\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect (response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// - // \r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													" // - // \r",
													"\r",
													"\r",
													"\r",
													"// Excluir produto // \r",
													"\r",
													"pm.test(\"Excluir produto\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('idProd', response._id);\r",
													"})\r",
													"\r",
													"let token = 'Bearer ' + pm.environment.get('token')\r",
													"console.log(pm.environment.get('token'))\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('idProd');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: ` ${url}/produtos/${id}`,   \r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json',\r",
													"         'Authorization' :` ${token}`\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"// - // "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\":\"Chapa de met@l *$$()\",\r\n\r\n    \"preco\": 100,\r\n\r\n    \"descricao\":\"{{$randomProductMaterial}}\",\r\n\r\n    \"quantidade\":15\r\n    \r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/produtos"
									},
									"response": []
								},
								{
									"name": "CT/ ERRO27 Cadastrar produto (valor alto)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Cadastrar o mesmo Produto \r",
													"\r",
													"\r",
													"\r",
													"const url = pm.environment.get('baseURL')\r",
													"//\r",
													"\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, //variavel \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"        \"email\": \"fulano@qa.com\",\r",
													"       \"password\": \"teste\"\r",
													"})\r",
													"\r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"// \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"O Código tem que ser 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Não tem que fazer POST\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('Created');\r",
													"});\r",
													"\r",
													"const atributos = [\"message\"]\r",
													"const response = pm.response.json()\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect (response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// - // \r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													" // - // \r",
													"\r",
													"\r",
													"\r",
													"// Excluir produto // \r",
													"\r",
													"pm.test(\"Excluir produto\", function (){\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set('idProd', response._id);\r",
													"})\r",
													"\r",
													"let token = 'Bearer ' + pm.environment.get('token')\r",
													"console.log(pm.environment.get('token'))\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('idProd');\r",
													"\r",
													"\r",
													"const  delUser = {\r",
													"    url: ` ${url}/produtos/${id}`,   \r",
													"    method: 'DELETE',\r",
													"    header: { \r",
													"        'Content-Type' : 'application/json',\r",
													"         'Authorization' :` ${token}`\r",
													"\r",
													"    }\r",
													" }\r",
													"\r",
													"pm.sendRequest(delUser,  (err, response) => {\r",
													"    console.log(err ? err : response.json());\r",
													"\r",
													"\r",
													"})\r",
													"\r",
													"// - // "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\":\"{{$randomProduct}}\",\r\n\r\n    \"preco\":999999999999999,\r\n\r\n    \"descricao\":\"{{$randomProductMaterial}}\",\r\n\r\n    \"quantidade\":20\r\n    \r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/produtos"
									},
									"response": []
								}
							]
						},
						{
							"name": "CT28 Cadastrar produto (produto ja existente)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Cadastrar o mesmo Produto \r",
											"\r",
											"\r",
											"\r",
											"const url = pm.environment.get('baseURL')\r",
											"//\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, //variavel \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"fulano@qa.com\",\r",
											"       \"password\": \"teste\"\r",
											"})\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Não tem que fazer POST\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"});\r",
											"\r",
											"const atributos = [\"message\"]\r",
											"const response = pm.response.json()\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											"\r",
											"\r",
											"// Excluir produto // \r",
											"\r",
											"pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idProd', response._id);\r",
											"})\r",
											"\r",
											"let token = 'Bearer ' + pm.environment.get('token')\r",
											"console.log(pm.environment.get('token'))\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('idProd');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: ` ${url}/produtos/${id}`,   \r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json',\r",
											"         'Authorization' :` ${token}`\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\":\"Mouse Logitech\",\r\n\r\n    \"preco\":50,\r\n\r\n    \"descricao\":\"Mouse Gamer com Led.\",\r\n\r\n    \"quantidade\":20\r\n    \r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/produtos"
							},
							"response": []
						},
						{
							"name": "CT29 Cadastrar produto (sem nada na quantidade)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Cadastrar o mesmo Produto \r",
											"\r",
											"\r",
											"\r",
											"const url = pm.environment.get('baseURL')\r",
											"//\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, //variavel \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"fulano@qa.com\",\r",
											"       \"password\": \"teste\"\r",
											"})\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Não tem que fazer POST\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"});\r",
											"\r",
											"const atributos = [\"quantidade\"]\r",
											"const response = pm.response.json()\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											"\r",
											"\r",
											"// Excluir produto // \r",
											"\r",
											"pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idProd', response._id);\r",
											"})\r",
											"\r",
											"let token = 'Bearer ' + pm.environment.get('token')\r",
											"console.log(pm.environment.get('token'))\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('idProd');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: ` ${url}/produtos/${id}`,   \r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json',\r",
											"         'Authorization' :` ${token}`\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\":\"{{$randomProduct}}\",\r\n\r\n    \"preco\":120,\r\n\r\n    \"descricao\":\"{{$randomProductMaterial}}\",\r\n\r\n    \"quantidade\":\" \"\r\n    \r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/produtos"
							},
							"response": []
						},
						{
							"name": "CT30 Cadastrar produto (quantidade 0)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Cadastrar o mesmo Produto \r",
											"\r",
											"\r",
											"\r",
											"const url = pm.environment.get('baseURL')\r",
											"//\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, //variavel \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"fulano@qa.com\",\r",
											"       \"password\": \"teste\"\r",
											"})\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O Código tem que ser 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"POST com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Created');\r",
											"});\r",
											"\r",
											"const atributos = [\"message\"]\r",
											"const response = pm.response.json()\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											"\r",
											"\r",
											"// Excluir produto // \r",
											"\r",
											"pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idProd', response._id);\r",
											"})\r",
											"\r",
											"let token = 'Bearer ' + pm.environment.get('token')\r",
											"console.log(pm.environment.get('token'))\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('idProd');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: ` ${url}/produtos/${id}`,   \r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json',\r",
											"         'Authorization' :` ${token}`\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\":\"{{$randomProduct}}\",\r\n\r\n    \"preco\":120,\r\n\r\n    \"descricao\":\"{{$randomProductMaterial}}\",\r\n\r\n    \"quantidade\":0\r\n    \r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/produtos"
							},
							"response": []
						},
						{
							"name": "CT31 Cadastrar produto (valor com ponto)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Cadastrar o mesmo Produto \r",
											"\r",
											"\r",
											"\r",
											"const url = pm.environment.get('baseURL')\r",
											"//\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, //variavel \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"fulano@qa.com\",\r",
											"       \"password\": \"teste\"\r",
											"})\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Não tem que fazer POST\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"});\r",
											"\r",
											"const atributos = [\"preco\"]\r",
											"const response = pm.response.json()\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											"\r",
											"\r",
											"// Excluir produto // \r",
											"\r",
											"pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idProd', response._id);\r",
											"})\r",
											"\r",
											"let token = 'Bearer ' + pm.environment.get('token')\r",
											"console.log(pm.environment.get('token'))\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('idProd');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: ` ${url}/produtos/${id}`,   \r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json',\r",
											"         'Authorization' :` ${token}`\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\":\"{{$randomProduct}}\",\r\n\r\n    \"preco\":1.80,\r\n\r\n    \"descricao\":\"{{$randomProductMaterial}}\",\r\n\r\n    \"quantidade\":15\r\n    \r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/produtos"
							},
							"response": []
						},
						{
							"name": "CT32 Cadastrar produto (valor com letra)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Cadastrar o mesmo Produto \r",
											"\r",
											"\r",
											"\r",
											"const url = pm.environment.get('baseURL')\r",
											"//\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, //variavel \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"fulano@qa.com\",\r",
											"       \"password\": \"teste\"\r",
											"})\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Não tem que fazer POST\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"});\r",
											"\r",
											"const atributos = [\"preco\"]\r",
											"const response = pm.response.json()\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											"\r",
											"\r",
											"// Excluir produto // \r",
											"\r",
											"pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idProd', response._id);\r",
											"})\r",
											"\r",
											"let token = 'Bearer ' + pm.environment.get('token')\r",
											"console.log(pm.environment.get('token'))\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('idProd');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: ` ${url}/produtos/${id}`,   \r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json',\r",
											"         'Authorization' :` ${token}`\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\":\"{{$randomProduct}}\",\r\n\r\n    \"preco\": \"as \",\r\n\r\n    \"descricao\":\"{{$randomProductMaterial}}\",\r\n\r\n    \"quantidade\":15\r\n    \r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/produtos"
							},
							"response": []
						},
						{
							"name": "CT33 Cadastrar produto (valor com caractere estranho)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Cadastrar o mesmo Produto \r",
											"\r",
											"\r",
											"\r",
											"const url = pm.environment.get('baseURL')\r",
											"//\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, //variavel \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"fulano@qa.com\",\r",
											"       \"password\": \"teste\"\r",
											"})\r",
											"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Não tem que fazer POST\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"});\r",
											"\r",
											"const atributos = [\"preco\"]\r",
											"const response = pm.response.json()\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											"\r",
											"\r",
											"// Excluir produto // \r",
											"\r",
											"pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idProd', response._id);\r",
											"})\r",
											"\r",
											"let token = 'Bearer ' + pm.environment.get('token')\r",
											"console.log(pm.environment.get('token'))\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('idProd');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: ` ${url}/produtos/${id}`,   \r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json',\r",
											"         'Authorization' :` ${token}`\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\":\"{{$randomProduct}}\",\r\n\r\n    \"preco\": \"¨%&%\",\r\n\r\n    \"descricao\":\"{{$randomProductMaterial}}\",\r\n\r\n    \"quantidade\":15\r\n    \r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/produtos"
							},
							"response": []
						},
						{
							"name": "CT34 Cadastrar produto ( Cadastrar produto vazio )",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//declaracao de variaveis e listas\r",
											"const novos_produtos = [\"\"];\r",
											"const descricao_nova = [\"\"];\r",
											"\r",
											"//-------------------funcoes ---------------\r",
											"function getRandomInt(max) {     //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\r",
											"    return Math.floor(Math.random() * max);\r",
											"}\r",
											"\r",
											"//-------------------- chamada de funcoes e geracao de numeros aleatorios\r",
											"\r",
											"pm.environment.set(\"item_nome\", novos_produtos[_.random(novos_produtos.length -1)]);\r",
											"pm.environment.set(\"item_desc\", descricao_nova[_.random(descricao_nova.length -1)]);\r",
											"pm.environment.set(\"item_quantidade\", getRandomInt(100) );\r",
											"pm.environment.set(\"item_preco\", getRandomInt(1000));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"// LOGIN // \r",
											"\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"POST com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 80ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(80);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"});\r",
											"\r",
											"const atributos = [\"nome\",\"descricao\"]\r",
											"const response = pm.response.json()\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\":\"{{item_nome}}\",\r\n\r\n    \"preco\":{{item_preco}},\r\n\r\n    \"descricao\":\"{{item_desc}}\",\r\n\r\n    \"quantidade\":{{item_quantidade}}\r\n    \r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/produtos"
							},
							"response": []
						},
						{
							"name": "CT35 Buscar produto por id (buscar produto que ja foi deletado)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O Código tem que ser 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"POST com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 80ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(80);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"});\r",
											"\r",
											"const atributos = [\"message\"]\r",
											"const response = pm.response.json()\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testerQA@hotmail.com\",\r",
											"       \"password\": \"testeQA\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{baseURL}}/produtos/q3q79shCbVKWo3Du"
							},
							"response": []
						}
					]
				},
				{
					"name": "CT Usuario sem token ADM",
					"item": [
						{
							"name": "ERRO",
							"item": [
								{
									"name": "CT/ERRO36 - Cadastrar usuário",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// LOGIN // \r",
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"        \"email\": \"testeComum@hotmail.com\",\r",
													"       \"password\": \"teste31\"\r",
													"})\r",
													"\r",
													"    }\r",
													"} \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"tokenSadm\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});\r",
													"// - // "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// TESTES // \r",
													"\r",
													" pm.test(\"O Código tem que ser 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													" pm.test(\"POST não deve ser feito \", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([401,400,403]);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('Forbidden');\r",
													"\r",
													"});\r",
													"\r",
													"const atributos = [\"message\"]\r",
													"\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// - // \r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenSadm}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "   {\r\n            \"nome\": \"Teste Para Deletar\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"teste2\",\r\n            \"administrador\": \"false\"\r\n        }\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/usuarios"
									},
									"response": []
								},
								{
									"name": "CT/ERRO37 - Editar usuário",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// TESTES // \r",
													"\r",
													" pm.test(\"O Código tem que ser 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													" pm.test(\"POST não deve ser feito \", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([401,400,403]);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('Forbidden');\r",
													"\r",
													"});\r",
													"\r",
													"const atributos = [\"message\"]\r",
													"\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// - // \r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// LOGIN // \r",
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"        \"email\": \"testeComum@hotmail.com\",\r",
													"       \"password\": \"teste31\"\r",
													"})\r",
													"\r",
													"    }\r",
													"} \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"tokenSadm\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});\r",
													"// - // "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenSadm}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n            \"nome\":\"Desmond Roomaguera\",\r\n\r\n            \"email\":\"Coby80@gmail.com\",\r\n\r\n            \"password\":\"teste\",\r\n                        \r\n            \"administrador\": \"true\" \r\n\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/usuarios/4T3YckfBewcPm0vf"
									},
									"response": []
								},
								{
									"name": "CT/ERRO38 - Listar usuários",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// TESTES // \r",
													"\r",
													" pm.test(\"O Código tem que ser 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													" pm.test(\"POST não deve ser feito \", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([401,400,403]);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('Forbidden');\r",
													"\r",
													"});\r",
													"\r",
													"const atributos = [\"message\"]\r",
													"\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// - // \r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// LOGIN // \r",
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"        \"email\": \"testeComum@hotmail.com\",\r",
													"       \"password\": \"teste31\"\r",
													"})\r",
													"\r",
													"    }\r",
													"} \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"tokenSadm\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});\r",
													"// - // "
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenSadm}}"
											}
										},
										"method": "GET",
										"header": [
											{
												"key": "CustomerName",
												"value": "' ou '1' ='1",
												"description": "String query = \"SELECT account_balance FROM user_data WHERE user_name = \"\n   + request.getParameter(\"customerName\");",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "{{baseURL}}/usuarios"
									},
									"response": []
								},
								{
									"name": "CT/ERRO39-Deletar usuário",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// LOGIN // \r",
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"        \"email\": \"testeComum@hotmail.com\",\r",
													"       \"password\": \"teste31\"\r",
													"})\r",
													"\r",
													"    }\r",
													"} \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"tokenSadm\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});\r",
													"// - // \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// TESTES // \r",
													"\r",
													" pm.test(\"O Código tem que ser 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													" pm.test(\"POST não deve ser feito \", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([401,400,403]);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('Forbidden');\r",
													"\r",
													"});\r",
													"\r",
													"const atributos = [\"message\"]\r",
													"\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// - // \r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenSadm}}"
											}
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "{{baseURL}}/usuarios/5HIKMgGFIdkZIGyB"
									},
									"response": []
								}
							]
						},
						{
							"name": "CT40 Login Usuario sem adm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"tokenSadm\", response.authorization.slice(7));\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status deve ser 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"POST com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"const atributos = [\"message\",\"authorization\"]\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testeComum@hotmail.com\",\r",
											"       \"password\": \"teste31\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"tokenSadm\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RlQ29tdW1AaG90bWFpbC5jb20iLCJwYXNzd29yZCI6InRlc3RlMSIsImlhdCI6MTY2MTM0OTE4MywiZXhwIjoxNjYxMzQ5NzgzfQ.UxrZzkpmOvQzkIlk_73KqXePk3cNowpq0KI6BCJjFm8"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"testeComum@hotmail.com\",\r\n  \"password\": \"teste1\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/login"
							},
							"response": []
						},
						{
							"name": "CT41 Cadastrar produto",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testeComum@hotmail.com\",\r",
											"       \"password\": \"teste31\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - // "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TESTES \r",
											"\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"const response = pm.response.json()\r",
											"console.log (response)\r",
											"\r",
											"const atributos =[\"message\"]\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"pm.test(\"Mensagem correta retornada\",()=>{\r",
											"    pm.expect(response.message).have.string(\"Rota exclusiva para administradores\")\r",
											"})\r",
											"\r",
											"pm.test(\"A respota deve ser válida e ter um body\", function () {\r",
											"     pm.response.to.be.forbidden;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.environment.get(\"idProd\"); // => setar a id do produto\r",
											"\r",
											"\r",
											"// Excluir produto // \r",
											"\r",
											"pm.test(\"Excluir produto\", function (){\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set('idProd', response._id);\r",
											"})\r",
											"\r",
											"let tokenSadm = 'Bearer ' + pm.environment.get('tokenSadm')\r",
											"console.log(pm.environment.get('tokenSadm'))\r",
											"\r",
											"const url = pm.environment.get('baseURL');\r",
											"const id = pm.environment.get('idProd');\r",
											"\r",
											"\r",
											"const  delUser = {\r",
											"    url: ` ${url}/produtos/${id}`,   \r",
											"    method: 'DELETE',\r",
											"    header: { \r",
											"        'Content-Type' : 'application/json',\r",
											"         'Authorization' :` ${tokenSadm}`\r",
											"\r",
											"    }\r",
											" }\r",
											"\r",
											"pm.sendRequest(delUser,  (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"\r",
											"\r",
											"})\r",
											"\r",
											"// - // \r",
											"\r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{tokenSadm}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\":\"{{$randomProductName}}\",\r\n\r\n    \"preco\":50,\r\n\r\n    \"descricao\":\"{{$randomProductMaterial}}\",\r\n\r\n    \"quantidade\":20\r\n    \r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/produtos"
							},
							"response": []
						},
						{
							"name": "CT42 Editar produto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"O Código tem que ser 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"PUT com sucesso\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403]);\r",
											"});\r",
											"\r",
											"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Code deu a resposta em String\", function () {\r",
											"    pm.response.to.have.status('Forbidden');\r",
											"});\r",
											"\r",
											"const atributos = [\"message\"]\r",
											"const response = pm.response.json()\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
											"        pm.expect (response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// - // \r",
											"//  Validacao de Header // \r",
											"\r",
											"pm.test(\"Content-Type está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-frame-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-frame-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"strict-transport-security está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"strict-transport-security\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-download-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-download-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-content-type-options está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-content-type-options\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-xss-protection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-xss-protection\");\r",
											"});\r",
											"\r",
											"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Length\");\r",
											"});\r",
											"\r",
											"pm.test(\"Date está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Connection está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"pm.test(\"Keep-Alive está presente no header\", function () {\r",
											"    pm.response.to.have.header(\"Keep-Alive\");\r",
											"});\r",
											"\r",
											" // - // \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// LOGIN // \r",
											"const url = pm.environment.get('baseURL')\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type':'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode:'raw',\r",
											"        raw: JSON.stringify({\r",
											"        \"email\": \"testeComum@hotmail.com\",\r",
											"       \"password\": \"teste31\"\r",
											"})\r",
											"\r",
											"    }\r",
											"} \r",
											"pm.sendRequest(postRequest, (err, response) =>  {\r",
											"    const res = response.json()\r",
											"\r",
											"    console.log (err ? err : res);\r",
											"    try {\r",
											"         //se der certo \r",
											"\r",
											"        pm.environment.set(\"tokenSadm\", res.authorization.slice(7))\r",
											"        console.log (res.authorization.slice(7))\r",
											"\r",
											"    } catch {\r",
											"\r",
											"        // se der erro \r",
											"        console.warn ('FAIL')\r",
											"    }\r",
											"});\r",
											"// - //\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{tokenSadm}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n            \"nome\": \"Ergonomic Plastic Keyboard\",\r\n\r\n            \"preco\": \"50\",\r\n\r\n            \"descricao\": \"Metal\",\r\n\r\n            \"quantidade\": \"10\"\r\n\r\n        }\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/produtos/aXxbFtIvw8mEND3t"
							},
							"response": []
						}
					]
				},
				{
					"name": "CT FLUXO DE COMPRAS",
					"item": [
						{
							"name": "CTF43 - 1 usuario ter dois carrinhos",
							"item": [
								{
									"name": "Realizar Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() \r",
													"\r",
													"\r",
													"pm.environment.set(\"token\", response.authorization.slice(7));\r",
													"\r",
													"// TESTES // \r",
													"\r",
													" pm.test(\"O Código tem que ser 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													" pm.test(\"POST com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"\r",
													"});\r",
													"\r",
													"const atributos = [\"message\",\"authorization\"]\r",
													"\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// - // \r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													" // - // \r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// LOGIN // \r",
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"       \"email\": \"Coby80@gmail.com\",\r",
													"       \"password\": \"teste\"\r",
													"})\r",
													"\r",
													"    }\r",
													"} \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"IdC2\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});\r",
													"// - // "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{IdC2}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"Coby80@gmail.com\",\r\n  \"password\": \"teste\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/login"
									},
									"response": []
								},
								{
									"name": "Cadastrar Carrinho 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// LOGIN // \r",
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"       \"email\": \"Coby80@gmail.com\",\r",
													"       \"password\": \"teste\"\r",
													"})\r",
													"\r",
													"    }\r",
													"} \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"IdC2\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});\r",
													"// - // "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"O Código tem que ser 200\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"GET com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('Created');\r",
													"});\r",
													"\r",
													"const atributos = [\"message\"]\r",
													"const response = pm.response.json()\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect (response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													" pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													" // - // "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{IdC2}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 1\r\n    }\r\n   \r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/carrinhos"
									},
									"response": []
								},
								{
									"name": "Cadastrar Carrinho 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// LOGIN // \r",
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"       \"email\": \"Coby80@gmail.com\",\r",
													"       \"password\": \"teste\"\r",
													"})\r",
													"\r",
													"    }\r",
													"} \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"IdC2\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});\r",
													"// - // "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"O Código tem que ser 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"GET sem sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"const atributos = [\"message\"]\r",
													"const response = pm.response.json()\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect (response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													" pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													" // - // "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{IdC2}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 1\r\n    }\r\n   \r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/carrinhos"
									},
									"response": []
								},
								{
									"name": "Excluir Carrinho",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// LOGIN // \r",
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"       \"email\": \"Coby80@gmail.com\",\r",
													"       \"password\": \"teste\"\r",
													"})\r",
													"\r",
													"    }\r",
													"} \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"IdC2\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});\r",
													"// - // "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"O Código tem que ser 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"GET com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"const atributos = [\"message\"]\r",
													"const response = pm.response.json()\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect (response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													" pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													" // - // "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{IdC2}}"
											}
										},
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/carrinhos/cancelar-compra"
									},
									"response": []
								}
							]
						},
						{
							"name": "CTF44 -adicionar o mesmo produto 2x",
							"item": [
								{
									"name": "Realizar Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() \r",
													"\r",
													"\r",
													"pm.environment.set(\"token\", response.authorization.slice(7));\r",
													"\r",
													"// TESTES // \r",
													"\r",
													" pm.test(\"O Código tem que ser 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													" pm.test(\"POST com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 100ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(25);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"\r",
													"});\r",
													"\r",
													"const atributos = [\"message\",\"authorization\"]\r",
													"\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect(pm.response.json()[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"    pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// - // \r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													" // - // \r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// LOGIN // \r",
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"       \"email\": \"Coby80@gmail.com\",\r",
													"       \"password\": \"teste\"\r",
													"})\r",
													"\r",
													"    }\r",
													"} \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"IdC2\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});\r",
													"// - // "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{IdC2}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"Coby80@gmail.com\",\r\n  \"password\": \"teste\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/login"
									},
									"response": []
								},
								{
									"name": "Cadastrar Carrinho 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// LOGIN // \r",
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"       \"email\": \"Coby80@gmail.com\",\r",
													"       \"password\": \"teste\"\r",
													"})\r",
													"\r",
													"    }\r",
													"} \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"IdC2\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});\r",
													"// - // "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"O Código tem que ser 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"GET com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"const atributos = [\"message\"]\r",
													"const response = pm.response.json()\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect (response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													" pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													" // - // "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{IdC2}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/carrinhos"
									},
									"response": []
								},
								{
									"name": "Excluir Carrinho",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// LOGIN // \r",
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"       \"email\": \"Coby80@gmail.com\",\r",
													"       \"password\": \"teste\"\r",
													"})\r",
													"\r",
													"    }\r",
													"} \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"IdC2\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});\r",
													"// - // "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"O Código tem que ser 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"GET com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"const atributos = [\"message\"]\r",
													"const response = pm.response.json()\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect (response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													" pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													" // - // "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{IdC2}}"
											}
										},
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/carrinhos/cancelar-compra"
									},
									"response": []
								}
							]
						},
						{
							"name": "CTF45 comprar produto com 0 de quantidade",
							"item": [
								{
									"name": "Realizar Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() \r",
													"\r",
													"\r",
													"pm.environment.set(\"token\", response.authorization.slice(7));\r",
													"\r",
													"\r",
													"// Status code \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// LOGIN // \r",
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"       \"email\": \"Coby80@gmail.com\",\r",
													"       \"password\": \"teste\"\r",
													"})\r",
													"\r",
													"    }\r",
													"} \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"IdC2\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});\r",
													"// - // "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{IdC2}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"Coby80@gmail.com\",\r\n  \"password\": \"teste\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/login"
									},
									"response": []
								},
								{
									"name": "Cadastrar Carrinho 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// LOGIN // \r",
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"       \"email\": \"Coby80@gmail.com\",\r",
													"       \"password\": \"teste\"\r",
													"})\r",
													"\r",
													"    }\r",
													"} \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"IdC2\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});\r",
													"// - // "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"O Código tem que ser 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"GET sem sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"const atributos = [\"message\"]\r",
													"const response = pm.response.json()\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect (response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													" pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													" // - // "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{IdC2}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"TEVdbKQbKEAW39hx\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/carrinhos"
									},
									"response": []
								},
								{
									"name": "Excluir Carrinho",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// LOGIN // \r",
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"       \"email\": \"Coby80@gmail.com\",\r",
													"       \"password\": \"teste\"\r",
													"})\r",
													"\r",
													"    }\r",
													"} \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"IdC2\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});\r",
													"// - // "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"O Código tem que ser 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"GET com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"const atributos = [\"message\"]\r",
													"const response = pm.response.json()\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect (response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													" pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													" // - // "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{IdC2}}"
											}
										},
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/carrinhos/cancelar-compra"
									},
									"response": []
								}
							]
						},
						{
							"name": "CTF46 comprar produto que ja foi excluído",
							"item": [
								{
									"name": "Realizar Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json() \r",
													"\r",
													"\r",
													"pm.environment.set(\"token\", response.authorization.slice(7));\r",
													"\r",
													"\r",
													"// Status code \r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// LOGIN // \r",
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"       \"email\": \"Coby80@gmail.com\",\r",
													"       \"password\": \"teste\"\r",
													"})\r",
													"\r",
													"    }\r",
													"} \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"IdC2\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});\r",
													"// - // "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{IdC2}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"Coby80@gmail.com\",\r\n  \"password\": \"teste\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/login"
									},
									"response": []
								},
								{
									"name": "Cadastrar Carrinho 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// LOGIN // \r",
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"       \"email\": \"Coby80@gmail.com\",\r",
													"       \"password\": \"teste\"\r",
													"})\r",
													"\r",
													"    }\r",
													"} \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"IdC2\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});\r",
													"// - // "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"O Código tem que ser 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"GET com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('Bad Request');\r",
													"});\r",
													"\r",
													"const atributos = [\"message\"]\r",
													"const response = pm.response.json()\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect (response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													" pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													" // - // "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{IdC2}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"q3q79shCbVKWo3Du\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/carrinhos"
									},
									"response": []
								},
								{
									"name": "Deletar carrinho CompraEfetuada",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// LOGIN // \r",
													"const url = pm.environment.get('baseURL')\r",
													"const postRequest = {\r",
													"    url: `${url}/login`, \r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type':'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode:'raw',\r",
													"        raw: JSON.stringify({\r",
													"        \"email\": \"testerQA@hotmail.com\",\r",
													"       \"password\": \"testeQA\"\r",
													"})\r",
													"\r",
													"    }\r",
													"} \r",
													"pm.sendRequest(postRequest, (err, response) =>  {\r",
													"    const res = response.json()\r",
													"\r",
													"    console.log (err ? err : res);\r",
													"    try {\r",
													"         //se der certo \r",
													"\r",
													"        pm.environment.set(\"token\", res.authorization.slice(7))\r",
													"        console.log (res.authorization.slice(7))\r",
													"\r",
													"    } catch {\r",
													"\r",
													"        // se der erro \r",
													"        console.warn ('FAIL')\r",
													"    }\r",
													"});\r",
													"// - // "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"O Código tem que ser 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"GET com sucesso\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"O tempo de resposta é menor 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Code deu a resposta em String\", function () {\r",
													"    pm.response.to.have.status('OK');\r",
													"});\r",
													"\r",
													"const atributos = [\"message\"]\r",
													"const response = pm.response.json()\r",
													"\r",
													"atributos.forEach((atributo)=> {\r",
													"    pm.test(`Resposta contém atributo \"${atributo}\"`,()=> {\r",
													"        pm.expect (response[atributo]).to.exist\r",
													"    })\r",
													"})\r",
													"\r",
													" pm.test(\"A resposta tem que ser válida e conter um corpo\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"\r",
													"});\r",
													"\r",
													"//  Validacao de Header // \r",
													"\r",
													"pm.test(\"Content-Type está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Access-Control-Allow-Origin está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-dns-prefetch-control está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-dns-prefetch-control\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-frame-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-frame-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"strict-transport-security está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"strict-transport-security\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-download-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-download-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-content-type-options está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-content-type-options\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-xss-protection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-xss-protection\");\r",
													"});\r",
													"\r",
													"pm.test(\"x-moesif-transaction-id está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"x-moesif-transaction-id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Length está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Length\");\r",
													"});\r",
													"\r",
													"pm.test(\"Date está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"pm.test(\"Connection está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													"pm.test(\"Keep-Alive está presente no header\", function () {\r",
													"    pm.response.to.have.header(\"Keep-Alive\");\r",
													"});\r",
													"\r",
													" // - // "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{token}}"
											}
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "{{baseURL}}/carrinhos/concluir-compra"
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	]
}